name: Build web app and push image to aws ecr
on:
    push:
        branches: [ main ]
permissions:
  contents: write
  packages: write
        
jobs:
    build-and-push:
        name: Build and push to ecr
        runs-on: ubuntu-latest
        env: 
            AWS_REGION: us-east-1
            ECR_REPOSITORY: capstone-go-server
        steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
    
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
    
        - name: Automatic Tagging of Releases
          id: increment-git-tag
          run: |
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n x-access-token:${{ secrets.GITHUB_TOKEN }} | base64)"

            bash ./build/git_update.sh -v major 
         
    
        - name: Build, Tag, and Push the Image to Amazon ECR
          id: build-image
          run: |
            docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.increment-git-tag.outputs.git-tag }} .
            docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.increment-git-tag.outputs.git-tag }}  

        - name: Generate Dockerrun.aws.json file
          run: |
            echo "{
              \"AWSEBDockerrunVersion\": \"1\",
              \"Image\": {
                \"Name\": \"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.increment-git-tag.outputs.git-tag }}\",
                \"Update\": \"true\"
              },
              \"Ports\": [
                {
                  \"ContainerPort\": \"8080\"
                }
              ],
              \"Environment\": [
                {
                  \"Name\": \"URI\",
                  \"Value\": \"${{ secrets.URI }}\"
                },
                {
                  \"Name\": \"AUTH\",
                  \"Value\": \"${{ secrets.AUTH }}\"
                }
              ]
            }" > Dockerrun.aws.json

    
        - name: Deploy to Elastic Beanstalk
          env:
              EB_APP_NAME: capstone-go-v2
              EB_ENV: Capstone-go-v2-env
              VERSION_LABEL: ${{ steps.increment-git-tag.outputs.git-tag }}
          run: |
            zip deploy.zip Dockerrun.aws.json
            aws s3 cp deploy.zip s3://capstone-go-deployment-bucket/$VERSION_LABEL.zip            
            aws elasticbeanstalk create-application-version --application-name $EB_APP_NAME --version-label $VERSION_LABEL --source-bundle S3Bucket="capstone-go-deployment-bucket",S3Key="$VERSION_LABEL.zip"
            aws elasticbeanstalk update-environment --environment-name $EB_ENV --version-label $VERSION_LABEL